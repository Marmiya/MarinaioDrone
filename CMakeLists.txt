# CMakeList.txt : Top-level CMake project file, do global configuration

cmake_minimum_required (VERSION 3.11)
project ("AMarinaioDrone")

set(CMAKE_CXX_STANDARD 20)
add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)

if (MSVC)
    add_compile_options(/W2)
else()
    add_compile_options(-Wall -Wextra -pedantic -Werror)
endif()

set(AIRSIM_ROOT "C:/SSD/GitProject/AirSim")
INCLUDE_DIRECTORIES("${AIRSIM_ROOT}/AirLib/include")

function (link_airsim arg)
    target_link_libraries(${ARGV0} PRIVATE "${AIRSIM_ROOT}/AirLib/deps/rpclib/lib/x64/RelWithDebInfo/rpc.lib")
    target_link_libraries(${ARGV0} PRIVATE "${AIRSIM_ROOT}/AirLib/lib/x64/RelWithDebInfo/AirLib.lib")
endfunction ()

find_package(Eigen3 CONFIG REQUIRED)
if (EIGEN3_FOUND)   
include( ${EIGEN3_USE_FILE} ) 
endif()

set (CGAL_DATA_DIR "C:/src/CGALDATA")

find_package(Boost REQUIRED filesystem serialization)
find_package(OpenCV CONFIG REQUIRED)
find_package(argparse CONFIG REQUIRED)
find_package(CGAL COMPONENTS Qt5 REQUIRED)
find_package(Boost REQUIRED filesystem)
find_package(OpenMP REQUIRED)
find_package(tinyobjloader REQUIRED)
find_package(glog CONFIG REQUIRED)
find_package(embree 3 CONFIG REQUIRED)
find_package(SCIP CONFIG REQUIRED)
find_package(Qhull CONFIG REQUIRED)

add_definitions(-DCGAL_USE_BASIC_VIEWER)
include(CGAL_SCIP_support)
if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

function(link_general arg)
    target_include_directories(${ARGV0} PRIVATE ${Boost_INCLUDE_DIRS})
    target_link_libraries(${ARGV0} PRIVATE  ${OpenCV_LIBRARIES})
    target_link_libraries(${ARGV0} PRIVATE Boost::filesystem Boost::serialization)
    target_link_libraries(${ARGV0} PRIVATE argparse::argparse)
    target_link_libraries(${ARGV0} PRIVATE CGAL::CGAL_Basic_viewer)
    target_link_libraries(${ARGV0} PRIVATE CGAL::SCIP_support)
    target_link_libraries(${ARGV0} PRIVATE tinyobjloader::tinyobjloader)
    target_link_libraries(${ARGV0} PRIVATE glog::glog)
    target_link_libraries(${ARGV0} PRIVATE embree)
    target_link_libraries(${ARGV0} PRIVATE Qhull::qhullcpp)
endfunction()

FILE(GLOB LIBRARY_FILE "include/*.cpp" "include/*.h")
add_library(${PROJECT_NAME} ${LIBRARY_FILE})

if(MSVC)
    target_compile_options(${PROJECT_NAME} PUBLIC "/Zc:__cplusplus")
    #target_compile_options(${PROJECT_NAME} PUBLIC "/wd4819;")
endif()

target_include_directories(${PROJECT_NAME} PRIVATE src/voro)
target_include_directories(${PROJECT_NAME} PRIVATE ${Boost_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} PRIVATE Voro)
target_link_libraries(${PROJECT_NAME} PRIVATE ${OpenCV_LIBRARIES})
target_link_libraries(${PROJECT_NAME} PRIVATE ${Boost_LIBRARIES})
target_link_libraries(${PROJECT_NAME} PRIVATE argparse::argparse)
target_link_libraries(${PROJECT_NAME} PRIVATE CGAL::CGAL_Basic_viewer)
target_link_libraries(${PROJECT_NAME} PRIVATE CGAL::SCIP_support)
target_link_libraries(${PROJECT_NAME} PRIVATE tinyobjloader::tinyobjloader)
target_link_libraries(${PROJECT_NAME} PRIVATE glog::glog)
target_link_libraries(${PROJECT_NAME} PRIVATE embree)
target_link_libraries(${PROJECT_NAME} PRIVATE Qhull::qhullcpp)

add_subdirectory(src)